#include <Wire.h>
#include <SPI.h>
#include <Adafruit_LSM9DS1.h>
#include <Adafruit_Sensor.h>  // not used in this demo but required!
#include <MahonyAHRS.h>
#include <C610Bus.h>
#include <DFRobot_BMI160.h>

/*
  NOTES: 
  LQR Gain Matrix: [-1.6864008e+00 -2.0663252e-16 -3.0060002e-01 -1.1180325e-02]
- LQR code outputs desired torque for both motors.
- Be sure to reverse the output on one motor
- DJI Command takes in current in milliamps
- Current -> Torque conversion: 0.25nM / Amp
*/

C610Bus<CAN1> bus;

//Motor Information (TODO: Update this to the actual motor indexes)
char left_wheel_idx = 0;
char right_wheel_idx = 1;
char left_extend_idx = 2;
char right_extend_idx = 3;

float HEIGHT_POS = 0; //TODO: Set Height Position for leg extensions
float lqr_gains[] = {-1.3963862e+01, 0.0, -2.5197718e+00, -9.9999182e-02}; //{-64.41729, -0.10000086, -11.630441, -0.4833244};
//{-1.3963862e+01, 0.0, -2.5197718e+00, -9.9999182e-02}; //{-1.6864008e+00, 0.0, -3.0060002e-01,  -1.1180325e-02};

//[Angle in radians (about the wheels) from vert. , wheel angle (rad), angular vel. (rads/sec), angular vel. of wheels (rad/sec)]

//Impedence Control
float impedence_alpha = 50000;
float impedence_beta = 2000;

DFRobot_BMI160 bmi160;
const int8_t i2c_addr = 0x69;

const float SAMPLE_RATE = 500;
unsigned long prev_sensor_time = micros();

float accel_factor = 16384.0;
float gyro_factor = 16.384;
float deg_to_radians = 3.14 / 180;

float get_wheel_vel(){
  float left_vel = bus.Get(left_wheel_idx).Velocity();
  float right_vel = bus.Get(right_wheel_idx).Velocity();

  float output = 0.5 * (left_vel - right_vel);
  return output;
}

float get_wheel_torque (float* imu_array){
  float op_sum = 0;
  int lqr_len = sizeof(lqr_gains) / sizeof(float);

  for (int i = 0; i < lqr_len; i++)
    op_sum += lqr_gains[i] * imu_array[i];
  
  return op_sum;
}

float get_impedence_command(int motor_idx, float desired_pos){
  C610 esc = bus.Get(motor_idx);
  float motor_pos = esc.Position();
  float motor_vec = esc.Velocity();

  return impedence_alpha * (desired_pos - motor_pos) - impedence_beta * motor_vec;
}

void set_motor_comms(float wheel_torque){
  //Calculate and send motor commands based on a specified wheel torque
  float torque_to_amps = 4.0;
  float amps_to_millis = 1000;

  float wheel_amps = wheel_torque * torque_to_amps * amps_to_millis;
  wheel_amps = constrain(wheel_amps, -7000, 7000);

  float motor_comm_arr[4];
  
  motor_comm_arr[right_extend_idx] = get_impedence_command(right_extend_idx, HEIGHT_POS);
  motor_comm_arr[left_extend_idx] = get_impedence_command(left_extend_idx, HEIGHT_POS);
  motor_comm_arr[left_wheel_idx] = wheel_amps;
  motor_comm_arr[right_wheel_idx] = -1.0 * wheel_amps;

  bus.CommandTorques(motor_comm_arr[0], motor_comm_arr[1], 
                      motor_comm_arr[2], motor_comm_arr[3], C610Subbus::kOneToFourBlinks);
}

float angle_estimate = 0.0;

float complimentaryFilter(float prev_angle, float dt, float accelGyro[6]){
  float y_gyro = accelGyro[1] * dt;
  float accel_angle = -atan2(accelGyro[5], -accelGyro[3]) * (180 / 3.14);

  float alpha = 0.99;

  float new_angle = alpha * (prev_angle + y_gyro) + (1.0 - alpha) * (accel_angle);

  Serial.print("accel_pitch: ");
  Serial.println(accel_angle);

  return new_angle;
}

void setup()
{
  Serial.begin(115200);

  if (bmi160.softReset() != BMI160_OK){
    Serial.println("reset false");
    while(1);
  }

  // helper to just set the default scaling we want, see above!
  if (bmi160.I2cInit(i2c_addr) != BMI160_OK){
    Serial.println("init false");
    while(1);
  }
}
void loop()
{
  unsigned long start_time = millis();
  int16_t accelGyro[6]={0}; 
  
  //Get Accel and Gyro Data from BMI160 
  unsigned long sensor_time = micros();
  int rslt = bmi160.getAccelGyroData(accelGyro);
  if (rslt != 0){
    Serial.println("Cannot read IMU data from BMI160");
    return;
  }

  float gx = accelGyro[0] / gyro_factor; //Down
  float gy = accelGyro[1] / gyro_factor; //Away from USB
  float gz = accelGyro[2] / gyro_factor; //Behind IMU board
  
  float ax = accelGyro[3] / accel_factor;
  float ay = accelGyro[4] / accel_factor;
  float az = accelGyro[5] / accel_factor;

  float newGyroArray[] = {gx, gy, gz, ax, ay, az};

  //Angle Estimation
  float dt = (sensor_time - prev_sensor_time) / 1e6;
  angle_estimate = complimentaryFilter(angle_estimate, dt, newGyroArray);
  prev_sensor_time = sensor_time; 


  //Wheel Torque Computation
  float angular_vel = gy * deg_to_radians; 
  float wheel_vel = get_wheel_vel();
  float radian_est = angle_estimate * deg_to_radians;

  float imu_array[] = {-1.0 * radian_est, 0.0, -1.0 * angular_vel, -1.0 * wheel_vel};

  float wheel_torque = get_wheel_torque(imu_array);
  set_motor_comms(wheel_torque);
  
  Serial.print(angle_estimate);

  Serial.print(" torque: ");
  Serial.println(wheel_torque);
  //delay(2);
}